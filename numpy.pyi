from typing import Tuple, Dict, List, Optional, Iterable, Collection, overload

class dtype: ...

uint32: dtype

class array(Iterable[int], Sized):
  def __init__(self, arg: List[int]) -> None: ...
  def __lt__(self, n: int) -> array: ...
  def __le__(self, n: int) -> array: ...
  def __eq__(self, n: int) -> array: ...
  def __ne__(self, n: int) -> array: ...
  def __gt__(self, n: int) -> array: ...
  def __ge__(self, n: int) -> array: ...
  def __and__(self, rhs: array) -> array: ...
  def __sub__(self, n: int) -> array: ...

  @overload
  def __getitem__(self, key: slice) -> array: ...
  @overload
  def __getitem__(self, key: int) -> Dict[int, int]: ...
  @overload
  def __getitem__(self, key: Tuple[int, int]) -> int: ...

  @overload
  def __setitem__(self, key: Tuple[int, int], value: int) -> None: ...
  @overload
  def __setitem__(self, key: int, value: int) -> None: ...
  @overload
  def __setitem__(self, key: slice, value: int) -> None: ...
  @overload
  def __setitem__(self, key: slice, value: array) -> None: ...

  def all(self) -> bool: ...
  def nonzero(self) -> array: ...


def zeros(shape: Tuple[int, int], dtype: dtype) -> array: ...

def arange(shape: int) -> array: ...